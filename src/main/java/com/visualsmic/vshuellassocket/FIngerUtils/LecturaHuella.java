package com.visualsmic.vshuellassocket.FIngerUtils;


import com.visualsmic.vshuellassocket.Helper.ParameterUtils;
import com.visualsmic.vshuellassocket.Models.Client;
import com.visualsmic.vshuellassocket.Models.User;
import com.visualsmic.vshuellassocket.Services.FileManagement;
import com.visualsmic.vshuellassocket.Services.VSConsumeRest;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.visualsmic.vshuellassocket.App;
import com.visualsmic.vshuellassocket.EnrollmentController;
import io.socket.client.Socket;
import org.json.JSONObject;


import java.awt.AWTException;
import java.awt.Graphics2D;
import java.awt.Image;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

public class LecturaHuella {
   // FileInputStream fis;
    int longitudBytes;
    // objetos propios de las librerias del lector
    private final DPFPCapture lector = DPFPGlobal.getCaptureFactory().createCapture();
    private final DPFPEnrollment reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private final DPFPVerification verificador = DPFPGlobal.getVerificationFactory().createVerification();
    private DPFPTemplate template;
    private static final String TEMPLATE_PROPERTY = "template";
    public DPFPFeatureSet featuresVerification;

    private Image imageHuella;
    private String texto;
    private String statusCapture;

    private String mensaje = "";

    private int intIntentosLectura =0;
    public static boolean listenersAdd = false;

    public LecturaHuella() throws AWTException {   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents




    public void stop() {
        lector.stopCapture();
    }
    private Socket SO;

    public void Iniciar(Socket socket) {
        this.SO = socket;
        stop();//Agosto 2 2022
        start();
        System.out.println("Iniciar listenersAdd "+listenersAdd);

        if (listenersAdd == false) {
            lector.addDataListener(new DPFPDataAdapter() {
                @Override
                public void dataAcquired(final DPFPDataEvent e) {
                    try {
                        System.out.println("Lector Huella dataAcquired "+e);
                        setTexto("Huella dactilar capturada.!");
                        ProcesarCaptura(e.getSample());
                        identificarHuella();
                        reclutador.clear();
                    } catch (IOException ex) {
                    } catch (Exception ex) {
                        Logger.getLogger(LecturaHuella.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
                @Override
                public void readerConnected(final DPFPReaderStatusEvent e) {
                    setTexto("Sensor activado Para Consulta.!");
                }

                @Override
                public void readerDisconnected(final DPFPReaderStatusEvent e) {
                    setTexto("Sensor desactivado o no conectado.!");
                }
            });

            lector.addSensorListener(new DPFPSensorAdapter() {

                @Override
                public void fingerTouched(final DPFPSensorEvent e) {
                    // intIntentosLectura ++;
                    setTexto("Dedo colocado sobre el lector.! intentos ");
                }

                @Override
                public void fingerGone(final DPFPSensorEvent e) {
                    setTexto("Dedo retirado del lector.!");
                }

            });

            lector.addErrorListener(new DPFPErrorAdapter() {

                public void errorReader(final DPFPErrorEvent e) {
                    setTexto("Ocurrio un error con el lector.!");
                }
            });
        }

        listenersAdd = true;
    }



    private void ProcesarCaptura(DPFPSample sample) throws IOException, Exception {
        featuresVerification = extraerCaracteristicasHuella(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        if (featuresVerification != null) {
            try {
                reclutador.addFeatures(featuresVerification);
                Image image = CrearImagenHuella(sample);
                setImageHuella(image);
            } catch (DPFPImageQualityException e) {
                System.out.println("Error: " + e.getMessage());
            } finally {
                switch (reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY:
                        System.out.println("Plantilla ok");
                        break;
                    case TEMPLATE_STATUS_FAILED:
                        reclutador.clear();
                        stop();
                        setStatusCapture();

                        System.out.println("La plantilla no pudo ser creada");
                        start();
                        break;
                }
            }
        }
    }

    //metodo Identificar huella
    private void identificarHuella() throws AWTException, IOException {

        mensaje = "El usuario no existe";

        intIntentosLectura ++;


        VSConsumeRest HR = new VSConsumeRest();
        //System.out.println("aqui guardo"+client);
        Client client = new Client();
        User user = new User();
        FileManagement FM = new FileManagement();
        client = FM.ReadFileClient();

        user = FM.ReadFileConfig();

        client.setImageHuella(getEncodeImage(getImageHuella()));
        System.out.println("B64 "+Base64.getDecoder().decode(client.getImageHuella().getBytes()).toString());

        FM.GenerarFileClient(client);

        // System.out.println("Ir a base de datos DB client 1 getHuella " +getImageHuella());
       // System.out.println("Ir a base de datos DB client 2 getImageHuella " +client.getImageHuella());
        ParameterUtils PU = new ParameterUtils();
        // System.out.println("******************************************************************** BEGIN  ");
        //System.out.println(("parametros a enviar : "+ PU.ParameterDBConsultaHuella()));
        // System.out.println("******************************************************************** END ");
        JSONObject RS = HR.ReturnServices( PU.ParameterDBConsultaHuella());

        System.out.println("Ir a base de datos DB Intentos intIntentosLectura " +intIntentosLectura);
        System.out.println("Consulta HUella DB "+RS);
        JSONObject object = new JSONObject();
        object.put("IdUser", user.getLngNumId());
        if(RS == null){
            object.put("Message","Sin Informacion");
            object.put("TransactionResult",false);
            setTexto("Hubo Un Problema Al Guardar La Huella , Intentos : "+intIntentosLectura);
        }else{
            object.put("Message","Operaci√≥n Exitosa");
            object.put("TransactionResult",true);
            setTexto("Consulta Exitosa");
            EnrollmentController enrollmentController = App.getController();
            enrollmentController.ClearMessage(10000);
        }
        SO.emit("ConsultaHuellaResult",object);
        stop();//Martes Agosto 2,2022
    }

    private DPFPFeatureSet extraerCaracteristicasHuella(DPFPSample sample, DPFPDataPurpose dpfpDataPurpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, dpfpDataPurpose);
        } catch (DPFPImageQualityException e) {
            System.out.println("error generando caracteristicas: " + e.getMessage());
            return null;
        }
    }

    private Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    private void setImageHuella(Image image) {
        this.imageHuella = image;
    }

    private String getEncodeImage(Image imageHuella) {
        ImageIcon icon = new ImageIcon(imageHuella);
        BufferedImage image = new BufferedImage(450, 500, BufferedImage.TYPE_INT_RGB);
        byte[] imageInByte = null;
        Graphics2D g2d = image.createGraphics();
        g2d.drawImage(imageHuella, 0, 0, icon.getImageObserver());
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(image, "jpg", baos);
            baos.flush();
            imageInByte = baos.toByteArray();
        } catch (IOException e) {
            System.out.println("error al crear la imagen " + e.getMessage());
        }
        return Base64.getEncoder().encodeToString(imageInByte);
    }

    private Image getImageHuella() {
        return imageHuella;
    }

    private String getTexto() {
        return texto;
    }

    private String getStatusCapture() {
        return statusCapture;
    }

    
    private void setStatusCapture() {
        this.statusCapture = "Muestras Restantes: " + reclutador.getFeaturesNeeded();
    }
    private void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
       // firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }
    public void start() {
        setTexto("");
        System.out.println("Lector Huella start ");
        lector.startCapture();
        setTexto("El lector de huella dactilar Esta Listo Para Consulta");
    }
    private void setTexto(String texto) {
        this.texto = texto;
        String StatusCapture = getStatusCapture();
        if(StatusCapture==null) StatusCapture = "";
        EnrollmentController enrollmentController = App.getController();
        enrollmentController.displayMessage(texto+ " "+ StatusCapture);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables

}

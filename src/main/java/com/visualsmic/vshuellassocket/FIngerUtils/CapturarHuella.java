package com.visualsmic.vshuellassocket.FIngerUtils;

import com.visualsmic.vshuellassocket.App;
import com.visualsmic.vshuellassocket.Models.Client;
import com.visualsmic.vshuellassocket.Services.FileManagement;
import com.visualsmic.vshuellassocket.Services.VSConsumeRest;
import com.digitalpersona.onetouch.*;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.*;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.visualsmic.vshuellassocket.EnrollmentController;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;



public class CapturarHuella {

    int longitudBytes;
    // objetos propios de las librerias del lector
    private final DPFPCapture lector = DPFPGlobal.getCaptureFactory().createCapture();
    private final DPFPEnrollment reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private DPFPTemplate template;
    private static final String TEMPLATE_PROPERTY = "template";
    public DPFPFeatureSet featuresInscription;
    private Client client;
    private Image imageHuella;

    private String texto;
    private String statusCapture;

    public void setClient(Client client) {
        this.client = client;
    }

    public CapturarHuella() throws AWTException {

        /*
        setIconImage(new ImageIcon(getClass().getResource("/Imagenes/Fingerprint.png")).getImage());
        getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        */

       /* Robot r = new Robot();
        int tamX = getWidth();
        int tamY = getHeight();
        int maxX = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
        int maxY = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();
        r.mouseMove(maxX + 250 - tamX, maxY - tamY + 10);
        r.mousePress(InputEvent.BUTTON1_MASK);
        r.mouseRelease(InputEvent.BUTTON1_MASK);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
  //  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   // private void initComponents() {


    //}// </editor-fold>//GEN-END:initComponents




    public void stop() {
        lector.stopCapture();
    }

    public void Iniciar() {

        lector.addDataListener(new DPFPDataAdapter() {
            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                    try {
                        System.out.println("addDataListener,dataAcquired, Huella dactilar capturada.!");
                        setTexto("Huella dactilar capturada.!");
                        ProcesarCaptura(e.getSample());
                    } catch (IOException ex) {
                    } catch (Exception ex) {
                        Logger.getLogger(CapturarHuella.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
        });

        lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                        System.out.println("addDataListener,readerConnected, Sensor activado o conectado.! "+ e);
                        setTexto("Sensor activado o conectado.!");
            }

            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                System.out.println("addDataListener,readerDisconnected, Sensor desacticado o desconectado.! "+ e);
                setTexto("Sensor desactivado o no conectado.!");
            }
        });

        lector.addSensorListener(new DPFPSensorAdapter() {

            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                System.out.println("addDataListener,fingerTouched, Dedo colocado sobre el lector.!"+ e);
                setTexto("Dedo colocado sobre el lector.!");
            }

            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                System.out.println("addDataListener,fingerGone, Dedo retirado del lector.!"+ e);
                setTexto("Dedo retirado del lector.!");
            }

        });

        lector.addErrorListener(new DPFPErrorAdapter() {

            public void errorReader(final DPFPErrorEvent e) {
                System.out.println("addDataListener,errorReader, Ocurrio un error con el lector"+ e);
                setTexto("Ocurrio un error con el lector.!");
            }
        });

    }

    private void setTexto(String texto) {
        this.texto = texto;
        String StatusCapture = getStatusCapture();
        if(StatusCapture==null) StatusCapture = "";
        EnrollmentController enrollmentController = App.getController();
        enrollmentController.displayMessage(texto+ " "+ StatusCapture);
    }



    private void ProcesarCaptura(DPFPSample sample) throws IOException, Exception {
        featuresInscription = extraerCaracteristicasHuella(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
        if (featuresInscription != null) {
            try {

                reclutador.addFeatures(featuresInscription);
                Image image = CrearImagenHuella(sample);
                setImageHuella(image);
                setStatusCapture();
                updateFingerWS();
            } catch (DPFPImageQualityException | IOException e) {
                System.err.println("ProcesarCaptura ,Error: " + e.getMessage());
            } finally {
                System.out.println("ProcesarCaptura,estoy en finally "+reclutador.getTemplateStatus());
                setStatusCapture();
                System.out.println("estado = " + getStatusCapture());
                switch (reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY:
                        System.out.println("TEMPLATE_STATUS_READY");
                        stop();
                        setTemplate(reclutador.getTemplate());
                        setTexto("La Huella ha sido creada, ya puede Guardarla");
                        setStatusCapture();
                        guardarHuella();
                        break;

                    case TEMPLATE_STATUS_FAILED:
                        System.out.println("TEMPLATE_STATUS_FAILED");
                        reclutador.clear();
                        stop();
                        setStatusCapture();
                        setTemplate(null);
                        System.out.println("La plantilla no pudo ser creada");
                        start();
                        break;
                }
            }
        }
    }

    private DPFPFeatureSet extraerCaracteristicasHuella(DPFPSample sample, DPFPDataPurpose dpfpDataPurpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, dpfpDataPurpose);
        } catch (DPFPImageQualityException e) {
            System.out.println("error generando caracteristicas: " + e.getMessage());
            return null;
        }
    }

    private Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    private void setImageHuella(Image image) {
        this.imageHuella = image;
    }

    private void updateFingerWS() throws IOException, Exception {
//        System.out.println("por aqui actualizando "+Base64.getEncoder().encodeToString(getU().getUniqueId().getBytes()));



        client.setImageHuella(getEncodeImage(getImageHuella()));
//System.out.println("updateFingerWS Cliente 1 "+client.getImageHuella());
     //   System.out.println("updateFingerWS Cliente 2 "+getEncodeImage(getImageHuella()));
       // String object = new Gson().toJson(client);
//        System.out.println(object);
        VSConsumeRest vsConsumeRest = new VSConsumeRest();
      //  vsConsumeRest.ReturnServices(object);
       // client = null;
    }



    private String getEncodeImage(Image imageHuella) {
        ImageIcon icon = new ImageIcon(imageHuella);
        BufferedImage image = new BufferedImage(450, 500, BufferedImage.TYPE_INT_RGB);
        byte[] imageInByte = null;
        Graphics2D g2d = image.createGraphics();
        g2d.drawImage(imageHuella, 0, 0, icon.getImageObserver());
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(image, "jpg", baos);
            baos.flush();
            imageInByte = baos.toByteArray();
        } catch (IOException e) {
            System.out.println("error al crear la imagen " + e.getMessage());
        }
        return Base64.getEncoder().encodeToString(imageInByte);
    }

    private Image getImageHuella() {
        return imageHuella;
    }

    private String getTexto() {
        return texto;
    }

    private String getStatusCapture() {
        return statusCapture;
    }

    private void setStatusCapture() {
        this.statusCapture = "Muestras Restantes: " + reclutador.getFeaturesNeeded();
    }

    private void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        //firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    private void guardarHuella() throws IOException, Exception {

        FileManagement FM = new FileManagement();
        client = FM.ReadFileClient();

        String encodeString = Base64.getEncoder().encodeToString(template.serialize());

        client.setHuella(encodeString);
        client.setImageHuella(getEncodeImage(getImageHuella()));

        System.out.println("updateFingerWS Cliente  getHuella 1 "+client.getHuella());
        System.out.println("updateFingerWS Cliente getImageHuella 2 "+client.getImageHuella());
       // Gson gson = new Gson();
//        System.out.println("CapturaHuella guardarHuella json  " + json);
        FM.GenerarFileClient(client);
        procesarHuellaDB(client);

        stop();
        //GetCapturarHuella.setCapturarHuella();
//        this.dispose();
        System.out.println();

    }

    private void procesarHuellaDB(Client client) throws IOException {
        //Jose Agosto 4 Agregue este parche, raro BEGIN
       // client.setImageHuella(client.getHuella());
        FileManagement FM = new FileManagement();
        FM.GenerarFileClient(client);
        //Jose Agosto 4 Agregue este parche, raro END


      //  System.out.println("procesarHuellaDB getImageHuella "+client.getImageHuella());
     //   System.out.println("procesarHuellaDB getHuella "+client.getHuella());
        App.getController().ActivarCaptura(true);
        //VSConsumeRest vsConsumeRest = new VSConsumeRest();
        //Manipular clie e invocar consumo
        //vsConsumeRest.ReturnServices(client);
    }

    public void start() {
        lector.startCapture();
        setTexto("El lector de huella dactilar Esta Listo, Presione Capturar");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables

    // End of variables declaration//GEN-END:variables
}
